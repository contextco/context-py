# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.6, generator: @autorest/python@6.4.15)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ...operations._operations import build_log_conversation_request

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class LogOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~context_api.aio.ContextAPI`'s
        :attr:`log` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def conversation(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional[_models.PathsLi5TynApiV1LogConversationPostRequestbodyContentApplicationJsonSchema] = None,
        *,
        authorization: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Ingests a conversation.

        Ingests a conversation.

        :param body: Default value is None.
        :type body:
         ~context_api.models.PathsLi5TynApiV1LogConversationPostRequestbodyContentApplicationJsonSchema
        :keyword authorization: Default value is None.
        :paramtype authorization: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def conversation(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional[IO] = None,
        *,
        authorization: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Ingests a conversation.

        Ingests a conversation.

        :param body: Default value is None.
        :type body: IO
        :keyword authorization: Default value is None.
        :paramtype authorization: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def conversation(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional[
            Union[_models.PathsLi5TynApiV1LogConversationPostRequestbodyContentApplicationJsonSchema, IO]
        ] = None,
        *,
        authorization: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Ingests a conversation.

        Ingests a conversation.

        :param body: Is either a
         PathsLi5TynApiV1LogConversationPostRequestbodyContentApplicationJsonSchema type or a IO type.
         Default value is None.
        :type body:
         ~context_api.models.PathsLi5TynApiV1LogConversationPostRequestbodyContentApplicationJsonSchema
         or IO
        :keyword authorization: Default value is None.
        :paramtype authorization: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(
                    body, "PathsLi5TynApiV1LogConversationPostRequestbodyContentApplicationJsonSchema"
                )
            else:
                _json = None

        request = build_log_conversation_request(
            authorization=authorization,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})
