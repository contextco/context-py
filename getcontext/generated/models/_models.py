# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.7, generator: @autorest/python@6.9.9)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class Conversation(_serialization.Model):
    """Conversation.

    :ivar messages:
    :vartype messages: list[~context_api.models.Message]
    :ivar metadata: Dictionary of :code:`<string>`.
    :vartype metadata: dict[str, str]
    """

    _attribute_map = {
        "messages": {"key": "messages", "type": "[Message]"},
        "metadata": {"key": "metadata", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        messages: Optional[List["_models.Message"]] = None,
        metadata: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword messages:
        :paramtype messages: list[~context_api.models.Message]
        :keyword metadata: Dictionary of :code:`<string>`.
        :paramtype metadata: dict[str, str]
        """
        super().__init__(**kwargs)
        self.messages = messages
        self.metadata = metadata


class ConversationResponse(_serialization.Model):
    """ConversationResponse.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar metadata: Dictionary of :code:`<string>`. Required.
    :vartype metadata: dict[str, str]
    :ivar sentiment_trend: Required. Known values are: "up", "flat", and "down".
    :vartype sentiment_trend: str or ~context_api.models.ConversationSentimentTrend
    :ivar topics: Required.
    :vartype topics: list[~context_api.models.Topic]
    :ivar suggested_topics: Required.
    :vartype suggested_topics: list[~context_api.models.Topic]
    :ivar messages: Required.
    :vartype messages: list[~context_api.models.MessageResponse]
    """

    _validation = {
        "id": {"required": True},
        "metadata": {"required": True},
        "sentiment_trend": {"required": True},
        "topics": {"required": True},
        "suggested_topics": {"required": True},
        "messages": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "metadata": {"key": "metadata", "type": "{str}"},
        "sentiment_trend": {"key": "sentiment_trend", "type": "str"},
        "topics": {"key": "topics", "type": "[Topic]"},
        "suggested_topics": {"key": "suggested_topics", "type": "[Topic]"},
        "messages": {"key": "messages", "type": "[MessageResponse]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        metadata: Dict[str, str],
        sentiment_trend: Union[str, "_models.ConversationSentimentTrend"],
        topics: List["_models.Topic"],
        suggested_topics: List["_models.Topic"],
        messages: List["_models.MessageResponse"],
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword metadata: Dictionary of :code:`<string>`. Required.
        :paramtype metadata: dict[str, str]
        :keyword sentiment_trend: Required. Known values are: "up", "flat", and "down".
        :paramtype sentiment_trend: str or ~context_api.models.ConversationSentimentTrend
        :keyword topics: Required.
        :paramtype topics: list[~context_api.models.Topic]
        :keyword suggested_topics: Required.
        :paramtype suggested_topics: list[~context_api.models.Topic]
        :keyword messages: Required.
        :paramtype messages: list[~context_api.models.MessageResponse]
        """
        super().__init__(**kwargs)
        self.id = id
        self.metadata = metadata
        self.sentiment_trend = sentiment_trend
        self.topics = topics
        self.suggested_topics = suggested_topics
        self.messages = messages


class Message(_serialization.Model):
    """Message.

    :ivar role: Known values are: "system", "assistant", and "user".
    :vartype role: str or ~context_api.models.MessageParamsRole
    :ivar message:
    :vartype message: str
    :ivar type: Known values are: "message" and "tool".
    :vartype type: str or ~context_api.models.MessageParamsType
    :ivar event_timestamp:
    :vartype event_timestamp: ~datetime.datetime
    :ivar metadata: Dictionary of :code:`<string>`.
    :vartype metadata: dict[str, str]
    :ivar rating: Known values are: -1, 0, and 1.
    :vartype rating: int or ~context_api.models.Rating
    :ivar name:
    :vartype name: str
    :ivar thought:
    :vartype thought: str
    :ivar input: Any object.
    :vartype input: JSON
    :ivar observation:
    :vartype observation: str
    """

    _attribute_map = {
        "role": {"key": "role", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "event_timestamp": {"key": "event_timestamp", "type": "iso-8601"},
        "metadata": {"key": "metadata", "type": "{str}"},
        "rating": {"key": "rating", "type": "int"},
        "name": {"key": "name", "type": "str"},
        "thought": {"key": "thought", "type": "str"},
        "input": {"key": "input", "type": "object"},
        "observation": {"key": "observation", "type": "str"},
    }

    def __init__(
        self,
        *,
        role: Optional[Union[str, "_models.MessageParamsRole"]] = None,
        message: Optional[str] = None,
        type: Union[str, "_models.MessageParamsType"] = "message",
        event_timestamp: Optional[datetime.datetime] = None,
        metadata: Optional[Dict[str, str]] = None,
        rating: Optional[Union[int, "_models.Rating"]] = None,
        name: Optional[str] = None,
        thought: Optional[str] = None,
        input: Optional[JSON] = None,
        observation: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword role: Known values are: "system", "assistant", and "user".
        :paramtype role: str or ~context_api.models.MessageParamsRole
        :keyword message:
        :paramtype message: str
        :keyword type: Known values are: "message" and "tool".
        :paramtype type: str or ~context_api.models.MessageParamsType
        :keyword event_timestamp:
        :paramtype event_timestamp: ~datetime.datetime
        :keyword metadata: Dictionary of :code:`<string>`.
        :paramtype metadata: dict[str, str]
        :keyword rating: Known values are: -1, 0, and 1.
        :paramtype rating: int or ~context_api.models.Rating
        :keyword name:
        :paramtype name: str
        :keyword thought:
        :paramtype thought: str
        :keyword input: Any object.
        :paramtype input: JSON
        :keyword observation:
        :paramtype observation: str
        """
        super().__init__(**kwargs)
        self.role = role
        self.message = message
        self.type = type
        self.event_timestamp = event_timestamp
        self.metadata = metadata
        self.rating = rating
        self.name = name
        self.thought = thought
        self.input = input
        self.observation = observation


class MessageResponse(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """MessageResponse.

    All required parameters must be populated in order to send to server.

    :ivar type: Known values are: "message" and "tool".
    :vartype type: str or ~context_api.models.MessageType
    :ivar event_timestamp:
    :vartype event_timestamp: ~datetime.datetime
    :ivar role: Required. Known values are: "system", "assistant", and "user".
    :vartype role: str or ~context_api.models.MessageRole
    :ivar message: Required.
    :vartype message: str
    :ivar rating: Required. Known values are: -1, 0, and 1.
    :vartype rating: int or ~context_api.models.Rating
    :ivar language: Required.
    :vartype language: str
    :ivar translation:
    :vartype translation: str
    :ivar sentiment: Required.
    :vartype sentiment: float
    :ivar topics: Required.
    :vartype topics: list[~context_api.models.Topic]
    :ivar suggested_topics:
    :vartype suggested_topics: list[~context_api.models.Topic]
    :ivar metadata: Dictionary of :code:`<string>`.
    :vartype metadata: dict[str, str]
    """

    _validation = {
        "role": {"required": True},
        "message": {"required": True},
        "rating": {"required": True},
        "language": {"required": True},
        "sentiment": {"required": True},
        "topics": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "event_timestamp": {"key": "event_timestamp", "type": "iso-8601"},
        "role": {"key": "role", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "rating": {"key": "rating", "type": "int"},
        "language": {"key": "language", "type": "str"},
        "translation": {"key": "translation", "type": "str"},
        "sentiment": {"key": "sentiment", "type": "float"},
        "topics": {"key": "topics", "type": "[Topic]"},
        "suggested_topics": {"key": "suggested_topics", "type": "[Topic]"},
        "metadata": {"key": "metadata", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        role: Union[str, "_models.MessageRole"],
        message: str,
        rating: Union[int, "_models.Rating"],
        language: str,
        sentiment: float,
        topics: List["_models.Topic"],
        type: Union[str, "_models.MessageType"] = "message",
        event_timestamp: Optional[datetime.datetime] = None,
        translation: Optional[str] = None,
        suggested_topics: Optional[List["_models.Topic"]] = None,
        metadata: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Known values are: "message" and "tool".
        :paramtype type: str or ~context_api.models.MessageType
        :keyword event_timestamp:
        :paramtype event_timestamp: ~datetime.datetime
        :keyword role: Required. Known values are: "system", "assistant", and "user".
        :paramtype role: str or ~context_api.models.MessageRole
        :keyword message: Required.
        :paramtype message: str
        :keyword rating: Required. Known values are: -1, 0, and 1.
        :paramtype rating: int or ~context_api.models.Rating
        :keyword language: Required.
        :paramtype language: str
        :keyword translation:
        :paramtype translation: str
        :keyword sentiment: Required.
        :paramtype sentiment: float
        :keyword topics: Required.
        :paramtype topics: list[~context_api.models.Topic]
        :keyword suggested_topics:
        :paramtype suggested_topics: list[~context_api.models.Topic]
        :keyword metadata: Dictionary of :code:`<string>`.
        :paramtype metadata: dict[str, str]
        """
        super().__init__(**kwargs)
        self.type = type
        self.event_timestamp = event_timestamp
        self.role = role
        self.message = message
        self.rating = rating
        self.language = language
        self.translation = translation
        self.sentiment = sentiment
        self.topics = topics
        self.suggested_topics = suggested_topics
        self.metadata = metadata


class Pagination(_serialization.Model):
    """Pagination.

    All required parameters must be populated in order to send to server.

    :ivar total_records: Required.
    :vartype total_records: int
    :ivar per_page: Required.
    :vartype per_page: int
    :ivar current_page: Required.
    :vartype current_page: int
    :ivar previous_page: Required.
    :vartype previous_page: int
    :ivar next_page: Required.
    :vartype next_page: int
    :ivar page_count: Required.
    :vartype page_count: int
    """

    _validation = {
        "total_records": {"required": True},
        "per_page": {"required": True},
        "current_page": {"required": True},
        "previous_page": {"required": True},
        "next_page": {"required": True},
        "page_count": {"required": True},
    }

    _attribute_map = {
        "total_records": {"key": "total_records", "type": "int"},
        "per_page": {"key": "per_page", "type": "int"},
        "current_page": {"key": "current_page", "type": "int"},
        "previous_page": {"key": "previous_page", "type": "int"},
        "next_page": {"key": "next_page", "type": "int"},
        "page_count": {"key": "page_count", "type": "int"},
    }

    def __init__(
        self,
        *,
        total_records: int,
        per_page: int,
        current_page: int,
        previous_page: int,
        next_page: int,
        page_count: int,
        **kwargs: Any
    ) -> None:
        """
        :keyword total_records: Required.
        :paramtype total_records: int
        :keyword per_page: Required.
        :paramtype per_page: int
        :keyword current_page: Required.
        :paramtype current_page: int
        :keyword previous_page: Required.
        :paramtype previous_page: int
        :keyword next_page: Required.
        :paramtype next_page: int
        :keyword page_count: Required.
        :paramtype page_count: int
        """
        super().__init__(**kwargs)
        self.total_records = total_records
        self.per_page = per_page
        self.current_page = current_page
        self.previous_page = previous_page
        self.next_page = next_page
        self.page_count = page_count


class Paths11Gsqt2ApiV1TopicSuggestionsIdStatisticsGetResponses200ContentApplicationJsonSchema(_serialization.Model):
    """Paths11Gsqt2ApiV1TopicSuggestionsIdStatisticsGetResponses200ContentApplicationJsonSchema.

    All required parameters must be populated in order to send to server.

    :ivar topic: Required.
    :vartype topic: ~context_api.models.Topic
    :ivar statistics: Required.
    :vartype statistics:
     ~context_api.models.Paths1MjxjdtApiV1TopicSuggestionsIdStatisticsGetResponses200ContentApplicationJsonSchemaPropertiesStatistics  # pylint: disable=line-too-long
    """

    _validation = {
        "topic": {"required": True},
        "statistics": {"required": True},
    }

    _attribute_map = {
        "topic": {"key": "topic", "type": "Topic"},
        "statistics": {
            "key": "statistics",
            "type": "Paths1MjxjdtApiV1TopicSuggestionsIdStatisticsGetResponses200ContentApplicationJsonSchemaPropertiesStatistics",
        },
    }

    def __init__(
        self,
        *,
        topic: "_models.Topic",
        statistics: "_models.Paths1MjxjdtApiV1TopicSuggestionsIdStatisticsGetResponses200ContentApplicationJsonSchemaPropertiesStatistics",
        **kwargs: Any
    ) -> None:
        """
        :keyword topic: Required.
        :paramtype topic: ~context_api.models.Topic
        :keyword statistics: Required.
        :paramtype statistics:
         ~context_api.models.Paths1MjxjdtApiV1TopicSuggestionsIdStatisticsGetResponses200ContentApplicationJsonSchemaPropertiesStatistics  # pylint: disable=line-too-long
        """
        super().__init__(**kwargs)
        self.topic = topic
        self.statistics = statistics


class Paths1AqjttjApiV1ConversationsSeriesSentimentGetResponses200ContentApplicationJsonSchema(_serialization.Model):
    """Paths1AqjttjApiV1ConversationsSeriesSentimentGetResponses200ContentApplicationJsonSchema.

    All required parameters must be populated in order to send to server.

    :ivar series: Required.
    :vartype series: list[~context_api.models.SeriesItem]
    :ivar type: Required.
    :vartype type: str
    :ivar period: Required.
    :vartype period: str
    :ivar start_time: Required.
    :vartype start_time: str
    :ivar end_time: Required.
    :vartype end_time: str
    """

    _validation = {
        "series": {"required": True},
        "type": {"required": True},
        "period": {"required": True},
        "start_time": {"required": True},
        "end_time": {"required": True},
    }

    _attribute_map = {
        "series": {"key": "series", "type": "[SeriesItem]"},
        "type": {"key": "type", "type": "str"},
        "period": {"key": "period", "type": "str"},
        "start_time": {"key": "start_time", "type": "str"},
        "end_time": {"key": "end_time", "type": "str"},
    }

    def __init__(
        self,
        *,
        series: List["_models.SeriesItem"],
        type: str,
        period: str,
        start_time: str,
        end_time: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword series: Required.
        :paramtype series: list[~context_api.models.SeriesItem]
        :keyword type: Required.
        :paramtype type: str
        :keyword period: Required.
        :paramtype period: str
        :keyword start_time: Required.
        :paramtype start_time: str
        :keyword end_time: Required.
        :paramtype end_time: str
        """
        super().__init__(**kwargs)
        self.series = series
        self.type = type
        self.period = period
        self.start_time = start_time
        self.end_time = end_time


class Paths1J9XfjaApiV1ConversationsSeriesEstimatedCostGetResponses200ContentApplicationJsonSchema(
    _serialization.Model
):
    """Paths1J9XfjaApiV1ConversationsSeriesEstimatedCostGetResponses200ContentApplicationJsonSchema.

    All required parameters must be populated in order to send to server.

    :ivar series: Required.
    :vartype series: list[~context_api.models.SeriesItem]
    :ivar type: Required.
    :vartype type: str
    :ivar period: Required.
    :vartype period: str
    :ivar start_time: Required.
    :vartype start_time: str
    :ivar end_time: Required.
    :vartype end_time: str
    """

    _validation = {
        "series": {"required": True},
        "type": {"required": True},
        "period": {"required": True},
        "start_time": {"required": True},
        "end_time": {"required": True},
    }

    _attribute_map = {
        "series": {"key": "series", "type": "[SeriesItem]"},
        "type": {"key": "type", "type": "str"},
        "period": {"key": "period", "type": "str"},
        "start_time": {"key": "start_time", "type": "str"},
        "end_time": {"key": "end_time", "type": "str"},
    }

    def __init__(
        self,
        *,
        series: List["_models.SeriesItem"],
        type: str,
        period: str,
        start_time: str,
        end_time: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword series: Required.
        :paramtype series: list[~context_api.models.SeriesItem]
        :keyword type: Required.
        :paramtype type: str
        :keyword period: Required.
        :paramtype period: str
        :keyword start_time: Required.
        :paramtype start_time: str
        :keyword end_time: Required.
        :paramtype end_time: str
        """
        super().__init__(**kwargs)
        self.series = series
        self.type = type
        self.period = period
        self.start_time = start_time
        self.end_time = end_time


class Paths1MjxjdtApiV1TopicSuggestionsIdStatisticsGetResponses200ContentApplicationJsonSchemaPropertiesStatistics(
    _serialization.Model
):
    """Paths1MjxjdtApiV1TopicSuggestionsIdStatisticsGetResponses200ContentApplicationJsonSchemaPropertiesStatistics.

    All required parameters must be populated in order to send to server.

    :ivar conversation_count: Required.
    :vartype conversation_count: int
    :ivar user_message_count: Required.
    :vartype user_message_count: int
    :ivar assistant_message_count: Required.
    :vartype assistant_message_count: int
    :ivar mean_sentiment: Required.
    :vartype mean_sentiment: float
    :ivar mean_user_rating: Required.
    :vartype mean_user_rating: float
    """

    _validation = {
        "conversation_count": {"required": True},
        "user_message_count": {"required": True},
        "assistant_message_count": {"required": True},
        "mean_sentiment": {"required": True, "maximum": 1, "minimum": -1},
        "mean_user_rating": {"required": True, "maximum": 1, "minimum": -1},
    }

    _attribute_map = {
        "conversation_count": {"key": "conversation_count", "type": "int"},
        "user_message_count": {"key": "user_message_count", "type": "int"},
        "assistant_message_count": {"key": "assistant_message_count", "type": "int"},
        "mean_sentiment": {"key": "mean_sentiment", "type": "float"},
        "mean_user_rating": {"key": "mean_user_rating", "type": "float"},
    }

    def __init__(
        self,
        *,
        conversation_count: int,
        user_message_count: int,
        assistant_message_count: int,
        mean_sentiment: float,
        mean_user_rating: float,
        **kwargs: Any
    ) -> None:
        """
        :keyword conversation_count: Required.
        :paramtype conversation_count: int
        :keyword user_message_count: Required.
        :paramtype user_message_count: int
        :keyword assistant_message_count: Required.
        :paramtype assistant_message_count: int
        :keyword mean_sentiment: Required.
        :paramtype mean_sentiment: float
        :keyword mean_user_rating: Required.
        :paramtype mean_user_rating: float
        """
        super().__init__(**kwargs)
        self.conversation_count = conversation_count
        self.user_message_count = user_message_count
        self.assistant_message_count = assistant_message_count
        self.mean_sentiment = mean_sentiment
        self.mean_user_rating = mean_user_rating


class Paths1O34Sy5ApiV1LogConversationThreadPostResponses201ContentApplicationJsonSchemaPropertiesData(
    _serialization.Model
):
    """Paths1O34Sy5ApiV1LogConversationThreadPostResponses201ContentApplicationJsonSchemaPropertiesData.

    :ivar id:
    :vartype id: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, *, id: Optional[str] = None, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id:
        :paramtype id: str
        """
        super().__init__(**kwargs)
        self.id = id


class Paths1Ola7DlApiV1ConversationsSeriesVolumeGetResponses200ContentApplicationJsonSchema(_serialization.Model):
    """Paths1Ola7DlApiV1ConversationsSeriesVolumeGetResponses200ContentApplicationJsonSchema.

    All required parameters must be populated in order to send to server.

    :ivar series: Required.
    :vartype series: list[~context_api.models.SeriesItem]
    :ivar type: Required.
    :vartype type: str
    :ivar period: Required.
    :vartype period: str
    :ivar start_time: Required.
    :vartype start_time: str
    :ivar end_time: Required.
    :vartype end_time: str
    """

    _validation = {
        "series": {"required": True},
        "type": {"required": True},
        "period": {"required": True},
        "start_time": {"required": True},
        "end_time": {"required": True},
    }

    _attribute_map = {
        "series": {"key": "series", "type": "[SeriesItem]"},
        "type": {"key": "type", "type": "str"},
        "period": {"key": "period", "type": "str"},
        "start_time": {"key": "start_time", "type": "str"},
        "end_time": {"key": "end_time", "type": "str"},
    }

    def __init__(
        self,
        *,
        series: List["_models.SeriesItem"],
        type: str,
        period: str,
        start_time: str,
        end_time: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword series: Required.
        :paramtype series: list[~context_api.models.SeriesItem]
        :keyword type: Required.
        :paramtype type: str
        :keyword period: Required.
        :paramtype period: str
        :keyword start_time: Required.
        :paramtype start_time: str
        :keyword end_time: Required.
        :paramtype end_time: str
        """
        super().__init__(**kwargs)
        self.series = series
        self.type = type
        self.period = period
        self.start_time = start_time
        self.end_time = end_time


class Paths1S2Rf6XApiV1LogConversationThreadPostRequestbodyContentApplicationJsonSchema(_serialization.Model):
    """Paths1S2Rf6XApiV1LogConversationThreadPostRequestbodyContentApplicationJsonSchema.

    :ivar conversation:
    :vartype conversation: ~context_api.models.Thread
    """

    _attribute_map = {
        "conversation": {"key": "conversation", "type": "Thread"},
    }

    def __init__(self, *, conversation: Optional["_models.Thread"] = None, **kwargs: Any) -> None:
        """
        :keyword conversation:
        :paramtype conversation: ~context_api.models.Thread
        """
        super().__init__(**kwargs)
        self.conversation = conversation


class Paths1TzwckqApiV1TopicSuggestionsIdConversationsGetResponses200ContentApplicationJsonSchema(_serialization.Model):
    """Paths1TzwckqApiV1TopicSuggestionsIdConversationsGetResponses200ContentApplicationJsonSchema.

    All required parameters must be populated in order to send to server.

    :ivar conversations: Required.
    :vartype conversations: list[~context_api.models.ConversationResponse]
    :ivar pagination: Required.
    :vartype pagination: ~context_api.models.Pagination
    """

    _validation = {
        "conversations": {"required": True},
        "pagination": {"required": True},
    }

    _attribute_map = {
        "conversations": {"key": "conversations", "type": "[ConversationResponse]"},
        "pagination": {"key": "pagination", "type": "Pagination"},
    }

    def __init__(
        self, *, conversations: List["_models.ConversationResponse"], pagination: "_models.Pagination", **kwargs: Any
    ) -> None:
        """
        :keyword conversations: Required.
        :paramtype conversations: list[~context_api.models.ConversationResponse]
        :keyword pagination: Required.
        :paramtype pagination: ~context_api.models.Pagination
        """
        super().__init__(**kwargs)
        self.conversations = conversations
        self.pagination = pagination


class Paths1U893W0ApiV1TopicSuggestionsGetResponses200ContentApplicationJsonSchema(_serialization.Model):
    """Paths1U893W0ApiV1TopicSuggestionsGetResponses200ContentApplicationJsonSchema.

    All required parameters must be populated in order to send to server.

    :ivar topics: Required.
    :vartype topics: list[~context_api.models.TopicWithSamples]
    :ivar pagination: Required.
    :vartype pagination: ~context_api.models.Pagination
    """

    _validation = {
        "topics": {"required": True},
        "pagination": {"required": True},
    }

    _attribute_map = {
        "topics": {"key": "topics", "type": "[TopicWithSamples]"},
        "pagination": {"key": "pagination", "type": "Pagination"},
    }

    def __init__(
        self, *, topics: List["_models.TopicWithSamples"], pagination: "_models.Pagination", **kwargs: Any
    ) -> None:
        """
        :keyword topics: Required.
        :paramtype topics: list[~context_api.models.TopicWithSamples]
        :keyword pagination: Required.
        :paramtype pagination: ~context_api.models.Pagination
        """
        super().__init__(**kwargs)
        self.topics = topics
        self.pagination = pagination


class PathsDo7Pm8ApiV1LogConversationThreadPostResponses201ContentApplicationJsonSchema(_serialization.Model):
    """PathsDo7Pm8ApiV1LogConversationThreadPostResponses201ContentApplicationJsonSchema.

    :ivar status:
    :vartype status: str
    :ivar data:
    :vartype data:
     ~context_api.models.Paths1O34Sy5ApiV1LogConversationThreadPostResponses201ContentApplicationJsonSchemaPropertiesData  # pylint: disable=line-too-long
    """

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "data": {
            "key": "data",
            "type": "Paths1O34Sy5ApiV1LogConversationThreadPostResponses201ContentApplicationJsonSchemaPropertiesData",
        },
    }

    def __init__(
        self,
        *,
        status: Optional[str] = None,
        data: Optional[
            "_models.Paths1O34Sy5ApiV1LogConversationThreadPostResponses201ContentApplicationJsonSchemaPropertiesData"
        ] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status:
        :paramtype status: str
        :keyword data:
        :paramtype data:
         ~context_api.models.Paths1O34Sy5ApiV1LogConversationThreadPostResponses201ContentApplicationJsonSchemaPropertiesData  # pylint: disable=line-too-long
        """
        super().__init__(**kwargs)
        self.status = status
        self.data = data


class PathsLi5TynApiV1LogConversationPostRequestbodyContentApplicationJsonSchema(_serialization.Model):
    """PathsLi5TynApiV1LogConversationPostRequestbodyContentApplicationJsonSchema.

    :ivar conversation:
    :vartype conversation: ~context_api.models.Conversation
    """

    _attribute_map = {
        "conversation": {"key": "conversation", "type": "Conversation"},
    }

    def __init__(self, *, conversation: Optional["_models.Conversation"] = None, **kwargs: Any) -> None:
        """
        :keyword conversation:
        :paramtype conversation: ~context_api.models.Conversation
        """
        super().__init__(**kwargs)
        self.conversation = conversation


class PathsPixtmzApiV1ConversationsSeriesGetResponses200ContentApplicationJsonSchema(_serialization.Model):
    """PathsPixtmzApiV1ConversationsSeriesGetResponses200ContentApplicationJsonSchema.

    All required parameters must be populated in order to send to server.

    :ivar available: Required.
    :vartype available: list[str]
    """

    _validation = {
        "available": {"required": True},
    }

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
    }

    def __init__(self, *, available: List[str], **kwargs: Any) -> None:
        """
        :keyword available: Required.
        :paramtype available: list[str]
        """
        super().__init__(**kwargs)
        self.available = available


class PathsRai0VpApiV1LogConversationUpsertPostRequestbodyContentApplicationJsonSchema(_serialization.Model):
    """PathsRai0VpApiV1LogConversationUpsertPostRequestbodyContentApplicationJsonSchema.

    :ivar conversation:
    :vartype conversation: ~context_api.models.Conversation
    """

    _attribute_map = {
        "conversation": {"key": "conversation", "type": "Conversation"},
    }

    def __init__(self, *, conversation: Optional["_models.Conversation"] = None, **kwargs: Any) -> None:
        """
        :keyword conversation:
        :paramtype conversation: ~context_api.models.Conversation
        """
        super().__init__(**kwargs)
        self.conversation = conversation


class PathsXq2NqjApiV1ConversationsSeriesRatingGetResponses200ContentApplicationJsonSchema(_serialization.Model):
    """PathsXq2NqjApiV1ConversationsSeriesRatingGetResponses200ContentApplicationJsonSchema.

    All required parameters must be populated in order to send to server.

    :ivar series: Required.
    :vartype series: list[~context_api.models.SeriesItem]
    :ivar type: Required.
    :vartype type: str
    :ivar period: Required.
    :vartype period: str
    :ivar start_time: Required.
    :vartype start_time: str
    :ivar end_time: Required.
    :vartype end_time: str
    """

    _validation = {
        "series": {"required": True},
        "type": {"required": True},
        "period": {"required": True},
        "start_time": {"required": True},
        "end_time": {"required": True},
    }

    _attribute_map = {
        "series": {"key": "series", "type": "[SeriesItem]"},
        "type": {"key": "type", "type": "str"},
        "period": {"key": "period", "type": "str"},
        "start_time": {"key": "start_time", "type": "str"},
        "end_time": {"key": "end_time", "type": "str"},
    }

    def __init__(
        self,
        *,
        series: List["_models.SeriesItem"],
        type: str,
        period: str,
        start_time: str,
        end_time: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword series: Required.
        :paramtype series: list[~context_api.models.SeriesItem]
        :keyword type: Required.
        :paramtype type: str
        :keyword period: Required.
        :paramtype period: str
        :keyword start_time: Required.
        :paramtype start_time: str
        :keyword end_time: Required.
        :paramtype end_time: str
        """
        super().__init__(**kwargs)
        self.series = series
        self.type = type
        self.period = period
        self.start_time = start_time
        self.end_time = end_time


class PathsY5Azv9ApiV1ConversationsGetResponses200ContentApplicationJsonSchema(_serialization.Model):
    """PathsY5Azv9ApiV1ConversationsGetResponses200ContentApplicationJsonSchema.

    All required parameters must be populated in order to send to server.

    :ivar conversations: Required.
    :vartype conversations: list[~context_api.models.ConversationResponse]
    :ivar pagination: Required.
    :vartype pagination: ~context_api.models.Pagination
    """

    _validation = {
        "conversations": {"required": True},
        "pagination": {"required": True},
    }

    _attribute_map = {
        "conversations": {"key": "conversations", "type": "[ConversationResponse]"},
        "pagination": {"key": "pagination", "type": "Pagination"},
    }

    def __init__(
        self, *, conversations: List["_models.ConversationResponse"], pagination: "_models.Pagination", **kwargs: Any
    ) -> None:
        """
        :keyword conversations: Required.
        :paramtype conversations: list[~context_api.models.ConversationResponse]
        :keyword pagination: Required.
        :paramtype pagination: ~context_api.models.Pagination
        """
        super().__init__(**kwargs)
        self.conversations = conversations
        self.pagination = pagination


class SeriesItem(_serialization.Model):
    """SeriesItem.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar data: Dictionary of :code:`<number>`. Required.
    :vartype data: dict[str, float]
    """

    _validation = {
        "name": {"required": True},
        "data": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "data": {"key": "data", "type": "{float}"},
    }

    def __init__(self, *, name: str, data: Dict[str, float], **kwargs: Any) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword data: Dictionary of :code:`<number>`. Required.
        :paramtype data: dict[str, float]
        """
        super().__init__(**kwargs)
        self.name = name
        self.data = data


class TestCase(_serialization.Model):
    """TestCase.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar model: Required.
    :vartype model: str
    :ivar messages: Required.
    :vartype messages: list[~context_api.models.TestCaseMessage]
    """

    _validation = {
        "name": {"required": True},
        "model": {"required": True},
        "messages": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "model": {"key": "model", "type": "str"},
        "messages": {"key": "messages", "type": "[TestCaseMessage]"},
    }

    def __init__(self, *, name: str, model: str, messages: List["_models.TestCaseMessage"], **kwargs: Any) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword model: Required.
        :paramtype model: str
        :keyword messages: Required.
        :paramtype messages: list[~context_api.models.TestCaseMessage]
        """
        super().__init__(**kwargs)
        self.name = name
        self.model = model
        self.messages = messages


class TestCaseMessage(_serialization.Model):
    """TestCaseMessage.

    All required parameters must be populated in order to send to server.

    :ivar message: Required.
    :vartype message: str
    :ivar role: Required. Known values are: "system", "assistant", and "user".
    :vartype role: str or ~context_api.models.TestCaseMessageRole
    """

    _validation = {
        "message": {"required": True},
        "role": {"required": True},
    }

    _attribute_map = {
        "message": {"key": "message", "type": "str"},
        "role": {"key": "role", "type": "str"},
    }

    def __init__(self, *, message: str, role: Union[str, "_models.TestCaseMessageRole"], **kwargs: Any) -> None:
        """
        :keyword message: Required.
        :paramtype message: str
        :keyword role: Required. Known values are: "system", "assistant", and "user".
        :paramtype role: str or ~context_api.models.TestCaseMessageRole
        """
        super().__init__(**kwargs)
        self.message = message
        self.role = role


class TestSet(_serialization.Model):
    """TestSet.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar test_cases: Required.
    :vartype test_cases: list[~context_api.models.TestCase]
    """

    _validation = {
        "name": {"required": True},
        "test_cases": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "test_cases": {"key": "test_cases", "type": "[TestCase]"},
    }

    def __init__(self, *, name: str, test_cases: List["_models.TestCase"], **kwargs: Any) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword test_cases: Required.
        :paramtype test_cases: list[~context_api.models.TestCase]
        """
        super().__init__(**kwargs)
        self.name = name
        self.test_cases = test_cases


class TestSetParams(_serialization.Model):
    """TestSetParams.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar version_id: Required.
    :vartype version_id: float
    """

    _validation = {
        "name": {"required": True},
        "version_id": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "version_id": {"key": "version_id", "type": "float"},
    }

    def __init__(self, *, name: str, version_id: float, **kwargs: Any) -> None:
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword version_id: Required.
        :paramtype version_id: float
        """
        super().__init__(**kwargs)
        self.name = name
        self.version_id = version_id


class Thread(_serialization.Model):
    """Thread.

    All required parameters must be populated in order to send to server.

    :ivar id:
    :vartype id: str
    :ivar messages: Required.
    :vartype messages: list[~context_api.models.Message]
    :ivar metadata: Dictionary of :code:`<string>`.
    :vartype metadata: dict[str, str]
    """

    _validation = {
        "messages": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "messages": {"key": "messages", "type": "[Message]"},
        "metadata": {"key": "metadata", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        messages: List["_models.Message"],
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id:
        :paramtype id: str
        :keyword messages: Required.
        :paramtype messages: list[~context_api.models.Message]
        :keyword metadata: Dictionary of :code:`<string>`.
        :paramtype metadata: dict[str, str]
        """
        super().__init__(**kwargs)
        self.id = id
        self.messages = messages
        self.metadata = metadata


class Topic(_serialization.Model):
    """Topic.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    """

    _validation = {
        "id": {"required": True},
        "name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, id: str, name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name


class TopicWithSamples(_serialization.Model):
    """TopicWithSamples.

    All required parameters must be populated in order to send to server.

    :ivar id: Required.
    :vartype id: str
    :ivar name: Required.
    :vartype name: str
    :ivar conversations_sample: Required.
    :vartype conversations_sample: list[~context_api.models.ConversationResponse]
    """

    _validation = {
        "id": {"required": True},
        "name": {"required": True},
        "conversations_sample": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "conversations_sample": {"key": "conversations_sample", "type": "[ConversationResponse]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        conversations_sample: List["_models.ConversationResponse"],
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword name: Required.
        :paramtype name: str
        :keyword conversations_sample: Required.
        :paramtype conversations_sample: list[~context_api.models.ConversationResponse]
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.conversations_sample = conversations_sample
