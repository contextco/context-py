# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.7, generator: @autorest/python@6.9.4)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._serialization import Serializer
from .._vendor import ContextAPIMixinABC

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_context_api_conversation_request(
    id: str, *, authorization: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/api/v1/conversations/{id}"
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if authorization is not None:
        _headers["Authorization"] = _SERIALIZER.header("authorization", authorization, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_context_api_conversations_request(
    *,
    authorization: Optional[str] = None,
    start_time: Optional[str] = None,
    end_time: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/api/v1/conversations"

    # Construct parameters
    if start_time is not None:
        _params["start_time"] = _SERIALIZER.query("start_time", start_time, "str")
    if end_time is not None:
        _params["end_time"] = _SERIALIZER.query("end_time", end_time, "str")

    # Construct headers
    if authorization is not None:
        _headers["Authorization"] = _SERIALIZER.header("authorization", authorization, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_log_conversation_request(*, authorization: Optional[str] = None, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/api/v1/log/conversation"

    # Construct headers
    if authorization is not None:
        _headers["Authorization"] = _SERIALIZER.header("authorization", authorization, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_log_conversation_upsert_request(*, authorization: Optional[str] = None, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/api/v1/log/conversation/upsert"

    # Construct headers
    if authorization is not None:
        _headers["Authorization"] = _SERIALIZER.header("authorization", authorization, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_suggested_topics_request(*, authorization: Optional[str] = None, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/api/v1/topic_suggestions"

    # Construct headers
    if authorization is not None:
        _headers["Authorization"] = _SERIALIZER.header("authorization", authorization, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_suggested_topic_conversations_request(  # pylint: disable=name-too-long
    id: str, *, authorization: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/api/v1/topic_suggestions/{id}/statistics"
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if authorization is not None:
        _headers["Authorization"] = _SERIALIZER.header("authorization", authorization, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_suggested_topic_statistics_request(
    id: str, *, authorization: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/api/v1/topic_suggestions/{id}/conversations"
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if authorization is not None:
        _headers["Authorization"] = _SERIALIZER.header("authorization", authorization, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


class ContextAPIOperationsMixin(ContextAPIMixinABC):
    @distributed_trace
    def conversation(
        self, id: str, *, authorization: Optional[str] = None, **kwargs: Any
    ) -> _models.ConversationResponse:
        """Returns conversation details.

        Returns conversation details.

        :param id: Required.
        :type id: str
        :keyword authorization: Default value is None.
        :paramtype authorization: str
        :return: ConversationResponse
        :rtype: ~context_api.models.ConversationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ConversationResponse] = kwargs.pop("cls", None)

        _request = build_context_api_conversation_request(
            id=id,
            authorization=authorization,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("ConversationResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def conversations(
        self,
        *,
        authorization: Optional[str] = None,
        start_time: Optional[str] = None,
        end_time: Optional[str] = None,
        **kwargs: Any
    ) -> _models.PathsY5Azv9ApiV1ConversationsGetResponses200ContentApplicationJsonSchema:
        """Returns list of conversations.

        Returns list of conversations.

        :keyword authorization: Default value is None.
        :paramtype authorization: str
        :keyword start_time: Limits returned conversations to those that occurred after given
         time.:code:`<br />`Must be ISO 8601. Defaults to the beginning of 6 days ago.:code:`<br />`.
         Default value is None.
        :paramtype start_time: str
        :keyword end_time: Limits returned conversations to those that occurred before given
         time.:code:`<br />`Must be ISO 8601. Defaults to now.:code:`<br />`. Default value is None.
        :paramtype end_time: str
        :return: PathsY5Azv9ApiV1ConversationsGetResponses200ContentApplicationJsonSchema
        :rtype:
         ~context_api.models.PathsY5Azv9ApiV1ConversationsGetResponses200ContentApplicationJsonSchema
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.PathsY5Azv9ApiV1ConversationsGetResponses200ContentApplicationJsonSchema] = kwargs.pop(
            "cls", None
        )

        _request = build_context_api_conversations_request(
            authorization=authorization,
            start_time=start_time,
            end_time=end_time,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize(
            "PathsY5Azv9ApiV1ConversationsGetResponses200ContentApplicationJsonSchema", pipeline_response
        )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class LogOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~context_api.ContextAPI`'s
        :attr:`log` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def conversation(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional[_models.PathsLi5TynApiV1LogConversationPostRequestbodyContentApplicationJsonSchema] = None,
        *,
        authorization: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Ingests a conversation.

        Ingests a conversation.

        :param body: Default value is None.
        :type body:
         ~context_api.models.PathsLi5TynApiV1LogConversationPostRequestbodyContentApplicationJsonSchema
        :keyword authorization: Default value is None.
        :paramtype authorization: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def conversation(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional[IO] = None,
        *,
        authorization: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Ingests a conversation.

        Ingests a conversation.

        :param body: Default value is None.
        :type body: IO
        :keyword authorization: Default value is None.
        :paramtype authorization: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def conversation(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional[
            Union[_models.PathsLi5TynApiV1LogConversationPostRequestbodyContentApplicationJsonSchema, IO]
        ] = None,
        *,
        authorization: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Ingests a conversation.

        Ingests a conversation.

        :param body: Is either a
         PathsLi5TynApiV1LogConversationPostRequestbodyContentApplicationJsonSchema type or a IO type.
         Default value is None.
        :type body:
         ~context_api.models.PathsLi5TynApiV1LogConversationPostRequestbodyContentApplicationJsonSchema
         or IO
        :keyword authorization: Default value is None.
        :paramtype authorization: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(
                    body, "PathsLi5TynApiV1LogConversationPostRequestbodyContentApplicationJsonSchema"
                )
            else:
                _json = None

        _request = build_log_conversation_request(
            authorization=authorization,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def conversation_upsert(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional[_models.PathsRai0VpApiV1LogConversationUpsertPostRequestbodyContentApplicationJsonSchema] = None,
        *,
        authorization: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Ingests or updates conversation.

        Ingests or updates conversation.

        :param body: Default value is None.
        :type body:
         ~context_api.models.PathsRai0VpApiV1LogConversationUpsertPostRequestbodyContentApplicationJsonSchema
        :keyword authorization: Default value is None.
        :paramtype authorization: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def conversation_upsert(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional[IO] = None,
        *,
        authorization: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Ingests or updates conversation.

        Ingests or updates conversation.

        :param body: Default value is None.
        :type body: IO
        :keyword authorization: Default value is None.
        :paramtype authorization: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def conversation_upsert(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional[
            Union[_models.PathsRai0VpApiV1LogConversationUpsertPostRequestbodyContentApplicationJsonSchema, IO]
        ] = None,
        *,
        authorization: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Ingests or updates conversation.

        Ingests or updates conversation.

        :param body: Is either a
         PathsRai0VpApiV1LogConversationUpsertPostRequestbodyContentApplicationJsonSchema type or a IO
         type. Default value is None.
        :type body:
         ~context_api.models.PathsRai0VpApiV1LogConversationUpsertPostRequestbodyContentApplicationJsonSchema
         or IO
        :keyword authorization: Default value is None.
        :paramtype authorization: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(
                    body, "PathsRai0VpApiV1LogConversationUpsertPostRequestbodyContentApplicationJsonSchema"
                )
            else:
                _json = None

        _request = build_log_conversation_upsert_request(
            authorization=authorization,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore


class SuggestedOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~context_api.ContextAPI`'s
        :attr:`suggested` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def topics(
        self, *, authorization: Optional[str] = None, **kwargs: Any
    ) -> _models.Paths1U893W0ApiV1TopicSuggestionsGetResponses200ContentApplicationJsonSchema:
        """Returns suggested topics details.

        Returns suggested topics details.

        :keyword authorization: Default value is None.
        :paramtype authorization: str
        :return: Paths1U893W0ApiV1TopicSuggestionsGetResponses200ContentApplicationJsonSchema
        :rtype:
         ~context_api.models.Paths1U893W0ApiV1TopicSuggestionsGetResponses200ContentApplicationJsonSchema
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.Paths1U893W0ApiV1TopicSuggestionsGetResponses200ContentApplicationJsonSchema] = kwargs.pop(
            "cls", None
        )

        _request = build_suggested_topics_request(
            authorization=authorization,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize(
            "Paths1U893W0ApiV1TopicSuggestionsGetResponses200ContentApplicationJsonSchema", pipeline_response
        )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def topic_conversations(
        self, id: str, *, authorization: Optional[str] = None, **kwargs: Any
    ) -> _models.Paths11Gsqt2ApiV1TopicSuggestionsIdStatisticsGetResponses200ContentApplicationJsonSchema:
        """Returns statistics of selected topic.

        Returns statistics of selected topic.

        :param id: Required.
        :type id: str
        :keyword authorization: Default value is None.
        :paramtype authorization: str
        :return:
         Paths11Gsqt2ApiV1TopicSuggestionsIdStatisticsGetResponses200ContentApplicationJsonSchema
        :rtype:
         ~context_api.models.Paths11Gsqt2ApiV1TopicSuggestionsIdStatisticsGetResponses200ContentApplicationJsonSchema
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[
            _models.Paths11Gsqt2ApiV1TopicSuggestionsIdStatisticsGetResponses200ContentApplicationJsonSchema
        ] = kwargs.pop("cls", None)

        _request = build_suggested_topic_conversations_request(
            id=id,
            authorization=authorization,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize(
            "Paths11Gsqt2ApiV1TopicSuggestionsIdStatisticsGetResponses200ContentApplicationJsonSchema",
            pipeline_response,
        )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def topic_statistics(
        self, id: str, *, authorization: Optional[str] = None, **kwargs: Any
    ) -> _models.Paths1TzwckqApiV1TopicSuggestionsIdConversationsGetResponses200ContentApplicationJsonSchema:
        """Returns a list of conversations matching given topic.

        Returns a list of conversations matching given topic.

        :param id: Required.
        :type id: str
        :keyword authorization: Default value is None.
        :paramtype authorization: str
        :return:
         Paths1TzwckqApiV1TopicSuggestionsIdConversationsGetResponses200ContentApplicationJsonSchema
        :rtype:
         ~context_api.models.Paths1TzwckqApiV1TopicSuggestionsIdConversationsGetResponses200ContentApplicationJsonSchema
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[
            _models.Paths1TzwckqApiV1TopicSuggestionsIdConversationsGetResponses200ContentApplicationJsonSchema
        ] = kwargs.pop("cls", None)

        _request = build_suggested_topic_statistics_request(
            id=id,
            authorization=authorization,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize(
            "Paths1TzwckqApiV1TopicSuggestionsIdConversationsGetResponses200ContentApplicationJsonSchema",
            pipeline_response,
        )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
